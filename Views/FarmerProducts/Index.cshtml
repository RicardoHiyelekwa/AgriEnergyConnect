@model IEnumerable<AgriEnergyConnect.Models.Product>

@{
    var farmerName = ViewData["FarmerName"] as string ?? "Your Products";
}

<!-- HEADER -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-success fw-bold mb-0">
        <i class="bi bi-basket-fill me-2"></i>@farmerName
    </h2>

    <!-- Logout form com loading -->
    <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline" id="logoutForm">
        <button type="submit" id="logoutBtn" class="btn btn-outline-danger btn-sm rounded-pill position-relative">
            <span id="logoutText"><i class="bi bi-box-arrow-right me-1"></i> Logout</span>
            <span id="logoutSpinner" class="spinner-border spinner-border-sm text-danger ms-2" style="display:none;" role="status"></span>
        </button>
    </form>
</div>

<!-- ALERT AREA -->
<div id="alertArea"></div>

<!-- PRODUCTS TABLE -->
<div class="card shadow-lg border-0 mb-4 animate__animated animate__fadeInUp">
    <div class="card-header bg-success text-light fw-semibold py-3">
        <i class="bi bi-box-seam me-2"></i> My Products
    </div>
    <div class="card-body p-0">
        <div id="productContainer">
            @if (!Model.Any())
            {
                <div class="text-center text-muted py-4">
                    <i class="bi bi-emoji-frown me-2 fs-5"></i>No products found. Add one below!
                </div>
            }
            else
            {
                <partial name="_ProductTablePartial" model="Model" />
            }
        </div>
    </div>
</div>

<!-- ADD NEW PRODUCT -->
<div class="card shadow-lg border-0 animate__animated animate__fadeInUp">
    <div class="card-header bg-light fw-semibold py-3">
        <i class="bi bi-plus-circle text-success me-2"></i>Add New Product
    </div>

    <div class="card-body">
        <form id="addProductForm" class="row g-3">
            <div class="col-md-6">
                <label class="form-label fw-semibold">Product Name</label>
                <div class="input-group">
                    <span class="input-group-text bg-white"><i class="bi bi-tag text-success"></i></span>
                    <input type="text" name="name" class="form-control" placeholder="e.g. Organic Maize" required />
                </div>
            </div>

            <div class="col-md-6">
                <label class="form-label fw-semibold">Category</label>
                <div class="input-group">
                    <span class="input-group-text bg-white"><i class="bi bi-tags text-success"></i></span>
                    <input type="text" name="category" class="form-control" placeholder="e.g. Grains" required />
                </div>
            </div>

            <div class="col-md-6">
                <label class="form-label fw-semibold">Production Date</label>
                <div class="input-group">
                    <span class="input-group-text bg-white"><i class="bi bi-calendar3 text-success"></i></span>
                    <input type="date" name="productionDate" class="form-control" required />
                </div>
            </div>

            <input type="hidden" name="farmerId" value="@ViewData["FarmerId"]" />

            <div class="col-12 text-end mt-3">
                <button type="submit" id="addBtn" class="btn btn-success rounded-pill px-4">
                    <span id="btnText"><i class="bi bi-plus-circle me-1"></i> Add Product</span>
                    <span id="btnSpinner" class="spinner-border spinner-border-sm text-light ms-2" style="display:none;"></span>
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

    <style>
        .input-group:focus-within {
            box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
            border-radius: 0.5rem;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(40, 167, 69, 0.05);
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(40, 167, 69, 0.3);
        }

        /* Efeito blur durante logout */
        .blurred {
            filter: blur(5px);
            pointer-events: none;
            transition: filter 0.3s ease-in-out;
        }

        /* Tela de loading do logout */
        #logoutOverlay {
            position: fixed;
            inset: 0;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(8px);
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            z-index: 2000;
            display: none;
        }
    </style>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById('addProductForm');
            const btn = document.getElementById('addBtn');
            const btnText = document.getElementById('btnText');
            const spinner = document.getElementById('btnSpinner');
            const alertArea = document.getElementById('alertArea');
            const productContainer = document.getElementById('productContainer');

            // Adicionar produto via AJAX
            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                btn.disabled = true;
                btnText.innerHTML = '<i class="bi bi-hourglass-split me-1"></i> Adding...';
                spinner.style.display = 'inline-block';

                const formData = new FormData(form);
                try {
                    const response = await fetch('/FarmerProducts/AddAjax', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        productContainer.innerHTML = result.html;
                        showAlert('success', 'Product added successfully!');
                        form.reset();
                    } else {
                        showAlert('danger', result.message || 'Error adding product.');
                    }
                } catch (error) {
                    showAlert('danger', 'Unexpected error occurred.');
                } finally {
                    btn.disabled = false;
                    btnText.innerHTML = '<i class="bi bi-plus-circle me-1"></i> Add Product';
                    spinner.style.display = 'none';
                }
            });

            // Logout Loading Animation
            const logoutForm = document.getElementById('logoutForm');
            const logoutBtn = document.getElementById('logoutBtn');
            const logoutText = document.getElementById('logoutText');
            const logoutSpinner = document.getElementById('logoutSpinner');

            logoutForm.addEventListener('submit', function () {
                document.body.classList.add('blurred');

                const overlay = document.createElement('div');
                overlay.id = 'logoutOverlay';
                overlay.innerHTML = `
                            <div>
                                <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;"></div>
                                <p class="mt-3 text-success fw-semibold">Logging out...</p>
                            </div>`;
                document.body.appendChild(overlay);
                overlay.style.display = 'flex';
            });

            function showAlert(type, message) {
                alertArea.innerHTML = `
                            <div class="alert alert-${type} alert-dismissible fade show animate__animated animate__fadeInDown shadow-sm" role="alert">
                                <i class="bi ${type === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-triangle-fill'} me-2"></i>${message}
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>`;
                setTimeout(() => {
                    const alert = alertArea.querySelector('.alert');
                    if (alert) alert.classList.remove('show');
                }, 4000);
            }
        });
    </script>
}
